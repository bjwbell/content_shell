# -*- python -*-
# ex: set syntax=python:
import datetime

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['workers'] = [worker.Worker("slave0", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://github.com/bjwbell/ironframe',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'LayoutTests' build

c['schedulers'] = []
c['schedulers'].append(
    schedulers.Nightly(name='nightly1',
                       branch='master',
                       builderNames=['LayoutTests', 'Diff', 'Patch'],
                       hour=3,
                       minute=0))
c['schedulers'].append(
    schedulers.Nightly(name='nightly2',
                       branch='master',
                       builderNames=['Build', 'Merge'],
                       hour=4,
                       minute=0))
# c['schedulers'].append(
#     schedulers.Nightly(name='nightly3',
#                        branch='master',
#                        builderNames=['Deb'],
#                        hour=5,
#                        minute=0))

c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=['LayoutTests', 'Build', 'Diff', 'Patch', 'Merge', 'Deb']))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

layouttests = util.BuildFactory()
# check out the source
# layouttests.addStep(steps.Git(repourl='ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/chrome', mode='incremental'))
layouttests.addStep(steps.ShellCommand(command=["rm", "-rf", ".gclient"]))
layouttests.addStep(steps.ShellCommand(command=["rm", "-rf", ".gclient_entries"]))
layouttests.addStep(steps.ShellCommand(command=["rm", "-rf", "src"]))
layouttests.addStep(steps.ShellCommand(command=["rm", "-rf", "_bad_scm"]))
layouttests.addStep(steps.ShellCommand(command="rm -rf _gclient_src_*"))
layouttests.addStep(steps.ShellCommand(command=["fetch", "--nohooks", "chromium"], timeout=36000, haltOnFailure=True))
layouttests.addStep(steps.ShellCommand(command=["git", "remote", "add", "codecommit", "/home/bjwbell/repos/src.git"], workdir="build/src", haltOnFailure=True))
layouttests.addStep(steps.ShellCommand(command=["git", "fetch", "codecommit", "ironframe"], workdir="build/src", timeout=36000, haltOnFailure=True))
layouttests.addStep(steps.ShellCommand(command=["git", "checkout", "ironframe"], workdir="build/src", haltOnFailure=True))
layouttests.addStep(steps.ShellCommand(command=["gclient", "runhooks"], workdir="build/src", timeout=36000, haltOnFailure=True))
layouttests.addStep(steps.ShellCommand(command=["gclient", "sync"], workdir="build/src", timeout=36000, haltOnFailure=True))
layouttests.addStep(steps.ShellCommand(command="gn gen out/Default --args=\"is_debug=false\"", workdir="build/src", haltOnFailure=True))
layouttests.addStep(steps.ShellCommand(command=["ninja", "-C", "out/Default", "blink_tests"], workdir="build/src", timeout=36000, haltOnFailure=True))
layouttests.addStep(steps.ShellCommand(command=["python","testing/xvfb.py", "out/Default/", "python", "third_party/WebKit/Tools/Scripts/run-webkit-tests", "-t", "Default", "http/tests/ironframe"], workdir="build/src", haltOnFailure=True))


dt = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
filename = "ironframe-" + dt  + ".diff"
patchname = "ironframe-" + dt + ".patch"
pathname = "/home/bjwbell/buildbot/bb-worker/worker/Diff/build/ironframe/diffs/" + filename
patchpathname = "/home/bjwbell/buildbot/bb-worker/worker/Patch/build/ironframe/diffs/" + patchname

patch = util.BuildFactory()
# check out the source
# diff.addStep(steps.Git(repourl='ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/chrome', mode='incremental'))

patch.addStep(steps.ShellCommand(command=["rm", "-rf", "src"]))
patch.addStep(steps.ShellCommand(command=["git", "clone", "--no-single-branch", "/home/bjwbell/repos/src.git"], timeout=36000, haltOnFailure=True))
patch.addStep(steps.ShellCommand(command=["git", "checkout", "ironframe"], workdir="build/src", haltOnFailure=True))
patch.addStep(steps.ShellCommand(command=["rm", "-rf", "ironframe"], haltOnFailure=True))
patch.addStep(steps.ShellCommand(command=["git", "clone", "git@github.com:bjwbell/ironframe.git"], haltOnFailure=True))
patch.addStep(steps.ShellCommand(command="git format-patch origin/master --stdout >" + patchpathname, workdir="build/src", haltOnFailure=True))
patch.addStep(steps.ShellCommand(command=["git", "add", "diffs/" + patchname], workdir="build/ironframe", haltOnFailure=True))
patch.addStep(steps.ShellCommand(command="git commit -m \"Add " + patchname + "\"", workdir="build/ironframe", haltOnFailure=True))
patch.addStep(steps.ShellCommand(command=["git", "push", "origin", "master"], workdir="build/ironframe", haltOnFailure=True))

diff = util.BuildFactory()
diff.addStep(steps.ShellCommand(command=["rm", "-rf", "src"]))
diff.addStep(steps.ShellCommand(command=["git", "clone", "--no-single-branch", "/home/bjwbell/repos/src.git"], timeout=36000, haltOnFailure=True))
diff.addStep(steps.ShellCommand(command=["rm", "-rf", "ironframe"], haltOnFailure=True))
diff.addStep(steps.ShellCommand(command=["git", "clone", "git@github.com:bjwbell/ironframe.git"], haltOnFailure=True))
diff.addStep(steps.ShellCommand(command="git diff origin/master...origin/ironframe >" + pathname, workdir="build/src", haltOnFailure=True))
diff.addStep(steps.ShellCommand(command=["git", "add", "diffs/" + filename], workdir="build/ironframe", haltOnFailure=True))

diff.addStep(steps.ShellCommand(command="git commit -m \"Add " + filename + "\"", workdir="build/ironframe", haltOnFailure=True))
diff.addStep(steps.ShellCommand(command=["git", "push", "origin", "master"], workdir="build/ironframe", haltOnFailure=True))



build = util.BuildFactory()
# check out the source
# build.addStep(steps.Git(repourl='ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/chrome', mode='incremental'))
build.addStep(steps.ShellCommand(command="rm -rf _gclient_src_*"))
build.addStep(steps.ShellCommand(command=["rm", "-rf", ".gclient"]))
build.addStep(steps.ShellCommand(command=["rm", "-rf", ".gclient_entries"]))
build.addStep(steps.ShellCommand(command=["rm", "-rf", "old_src_third_party_opus_src.git"]))
build.addStep(steps.ShellCommand(command=["rm", "-rf", "src"]))
build.addStep(steps.ShellCommand(command=["rm", "-rf", "_bad_scm"]))
build.addStep(steps.ShellCommand(command=["fetch", "--nohooks", "chromium"], timeout=36000, haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["git", "remote", "add", "codecommit", "/home/bjwbell/repos/src.git"], workdir="build/src", haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["git", "fetch", "codecommit", "ironframe"], workdir="build/src", timeout=36000, haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["git", "checkout", "ironframe"], workdir="build/src", haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["gclient", "runhooks"], workdir="build/src", timeout=36000, haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["gclient", "sync"], workdir="build/src", timeout=36000, haltOnFailure=True))
build.addStep(steps.ShellCommand(command="gn gen out/Default --args=\"is_debug=false\"", workdir="build/src", haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["ninja", "-C", "out/Default", "chrome"], workdir="build/src", timeout=36000, haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["rm", "-rf", "out/Default/obj"], workdir="build/src", timeout=36000, haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["tar", "-czf", "out.tar.gz", "out/"], workdir="build/src", timeout=36000, haltOnFailure=True))
ironfilename = "out" + "-" + dt + ".tar.gz"
build.addStep(steps.ShellCommand(command=["/home/bjwbell/ironframe/nightlies/nightlies", "-bucket", "ironframe", "-file", "out.tar.gz", "-key", ironfilename], workdir="build/src", timeout=36000, haltOnFailure=True))

build.addStep(steps.ShellCommand(command=["git", "checkout", "master"], workdir="build/src", haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["gclient", "runhooks"], workdir="build/src", timeout=36000, haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["gclient", "sync"], workdir="build/src", timeout=36000, haltOnFailure=True))
build.addStep(steps.ShellCommand(command="gn gen out/Default --args=\"is_debug=false\"", workdir="build/src", haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["ninja", "-C", "out/Default", "chrome"], workdir="build/src", timeout=36000, haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["rm", "-rf", "out/Default/obj"], workdir="build/src", timeout=36000, haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["tar", "-czf", "chrome-master-upstream.tar.gz", "out/"], workdir="build/src", timeout=36000, haltOnFailure=True))
upstreamfilename = "chrome-master-upstream-" + dt + ".tar.gz"
build.addStep(steps.ShellCommand(command=["/home/bjwbell/ironframe/nightlies/nightlies", "-bucket", "ironframe", "-file", "chrome-master-upstream.tar.gz", "-key", upstreamfilename], workdir="build/src", timeout=36000, haltOnFailure=True))

build.addStep(steps.ShellCommand(command=["rm", "-rf", "ironframe"], haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["git", "clone", "git@github.com:bjwbell/ironframe.git"], haltOnFailure=True))
build.addStep(steps.ShellCommand(command="cat index.html | sed 's/Latest ironframe -/Latest ironframe - <a href=\"" + ironfilename + "\">" + ironfilename + "<\\/a><br>/'" + ">" + "tmp.html", workdir="build/ironframe/nightlies", haltOnFailure=True))
build.addStep(steps.ShellCommand(command="mv tmp.html index.html", workdir="build/ironframe/nightlies", haltOnFailure=True))
build.addStep(steps.ShellCommand(command="cat index.html | sed 's/Latest upstream -/Latest upstream - <a href=\"" + upstreamfilename + "\">" + upstreamfilename + "<\\/a><br>/'" + ">" + "tmp.html", workdir="build/ironframe/nightlies", haltOnFailure=True))
build.addStep(steps.ShellCommand(command="mv tmp.html index.html", workdir="build/ironframe/nightlies", haltOnFailure=True))
build.addStep(steps.ShellCommand(command="rm -f tmp.html", workdir="build/ironframe/nightlies", haltOnFailure=True))
build.addStep(steps.ShellCommand(command=["/home/bjwbell/ironframe/nightlies/nightlies", "-bucket", "ironframe", "-file", "index.html", "-key", "index.html"], workdir="build/ironframe/nightlies", timeout=36000, haltOnFailure=True))
build.addStep(steps.ShellCommand(command="git commit -a -m \"Update index.html\"", workdir="build/ironframe/nightlies", haltOnFailure=True))
build.addStep(steps.ShellCommand(command="git push origin master", workdir="build/ironframe/nightlies", haltOnFailure=True))



deb = util.BuildFactory()
debfilename = "chromium-browser_1.1.1.1-0ubuntu1_amd64.deb"
deb.addStep(steps.ShellCommand(command=["rm", "-rf", "ironframe"], haltOnFailure=True))
deb.addStep(steps.ShellCommand(command=["git", "clone", "git@github.com:bjwbell/ironframe.git"], haltOnFailure=True))
deb.addStep(steps.ShellCommand(command=["./fetch.sh"], workdir="build/ironframe/deb", timeout=36000, haltOnFailure=True))
deb.addStep(steps.ShellCommand(command=["./build-chrome.sh"], workdir="build/ironframe/deb", timeout=36000, haltOnFailure=True))
deb.addStep(steps.ShellCommand(command=["./build-deb.sh"], workdir="build/ironframe/deb", timeout=36000, haltOnFailure=True))
deb.addStep(steps.ShellCommand(command=["../nightlies/nightlies", "-bucket", "ironframe", "-file", debfilename, "-key", debfilename], workdir="build/ironframe/deb", timeout=36000, haltOnFailure=True))

deb.addStep(steps.ShellCommand(command="cat index.html | sed 's/Latest ironframe -/Latest ironframe - <a href=\"" + debfilename + "\">" + debfilename + "<\\/a><br>/'" + ">" + "tmp.html", workdir="build/ironframe/nightlies", haltOnFailure=True))
deb.addStep(steps.ShellCommand(command="mv tmp.html index.html", workdir="build/ironframe/nightlies", haltOnFailure=True))
deb.addStep(steps.ShellCommand(command="rm -f tmp.html", workdir="build/ironframe/nightlies", haltOnFailure=True))
deb.addStep(steps.ShellCommand(command=["/home/bjwbell/ironframe/nightlies/nightlies", "-bucket", "ironframe", "-file", "index.html", "-key", "index.html"], workdir="build/ironframe/nightlies", timeout=36000, haltOnFailure=True))
deb.addStep(steps.ShellCommand(command="git commit -a -m \"Update index.html\"", workdir="build/ironframe/nightlies", haltOnFailure=True))
deb.addStep(steps.ShellCommand(command="git push origin master", workdir="build/ironframe/nightlies", haltOnFailure=True))


merge = util.BuildFactory()
# check out the source
# merge.addStep(steps.Git(repourl='ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/chrome', mode='incremental'))
merge.addStep(steps.ShellCommand(command="rm -rf _gclient_src_*"))
merge.addStep(steps.ShellCommand(command=["rm", "-rf", ".gclient"]))
merge.addStep(steps.ShellCommand(command=["rm", "-rf", ".gclient_entries"]))
merge.addStep(steps.ShellCommand(command=["rm", "-rf", "src"]))
merge.addStep(steps.ShellCommand(command=["rm", "-rf", "_bad_scm"]))
merge.addStep(steps.ShellCommand(command=["fetch", "--nohooks", "chromium"], timeout=36000, haltOnFailure=True))
merge.addStep(steps.ShellCommand(command=["git", "remote", "add", "codecommit", "/home/bjwbell/repos/src.git"], workdir="build/src", haltOnFailure=True))
merge.addStep(steps.ShellCommand(command=["git", "fetch", "codecommit", "ironframe"], workdir="build/src", timeout=36000, haltOnFailure=True))
merge.addStep(steps.ShellCommand(command=["git", "checkout", "ironframe"], workdir="build/src", haltOnFailure=True))
merge.addStep(steps.ShellCommand(command=["gclient", "runhooks"], workdir="build/src", haltOnFailure=True))
merge.addStep(steps.ShellCommand(command=["gclient", "sync"], workdir="build/src", haltOnFailure=True))
merge.addStep(steps.ShellCommand(command="gn gen out/Default --args=\"is_debug=false\"", workdir="build/src", haltOnFailure=True))
merge.addStep(steps.ShellCommand(command=["ninja", "-C", "out/Default", "content_shell"], workdir="build/src", timeout=36000, haltOnFailure=True))
merge.addStep(steps.ShellCommand(command=["git", "rebase", "master"], workdir="build/src", haltOnFailure=True))
merge.addStep(steps.ShellCommand(command=["gclient", "sync"], workdir="build/src", haltOnFailure=True))
merge.addStep(steps.ShellCommand(command="gn gen out/Default --args=\"is_debug=false\"", workdir="build/src", haltOnFailure=True))
merge.addStep(steps.ShellCommand(command=["ninja", "-C", "out/Default", "content_shell"], workdir="build/src", timeout=36000, haltOnFailure=True))

merge.addStep(steps.ShellCommand(command=["git", "push", "--force-with-lease", "codecommit", "ironframe"], workdir="build/src", haltOnFailure=True))
merge.addStep(steps.ShellCommand(command=["git", "push", "-f", "codecommit", "master"], workdir="build/src", haltOnFailure=True))



c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="LayoutTests",
                       workernames=["slave0"],
                       factory=layouttests))

c['builders'].append(
    util.BuilderConfig(name="Diff",
                       workernames=["slave0"],
                       factory=diff))

c['builders'].append(
    util.BuilderConfig(name="Patch",
                       workernames=["slave0"],
                       factory=patch))

c['builders'].append(
    util.BuilderConfig(name="Build",
                       workernames=["slave0"],
                       factory=build))

c['builders'].append(
    util.BuilderConfig(name="Merge",
                       workernames=["slave0"],
                       factory=merge))

c['builders'].append(
    util.BuilderConfig(name="Deb",
                       workernames=["slave0"],
                       factory=deb))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "IronFrame"
c['titleURL'] = "http://ironframe.whiteops.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://138.68.0.174:8010/"

authz = util.Authz(
  allowRules=[
    util.StopBuildEndpointMatcher(role="admins"),
    util.ForceBuildEndpointMatcher(role="admins"),
    util.RebuildBuildEndpointMatcher(role="admins")
  ],
  roleMatchers=[
    util.RolesFromEmails(admins=["bjwbell@gmail.com"])
  ]
)
auth=util.UserPasswordAuth({'bjwbell@gmail.com': 'ironframe'})
# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))
c['www']['auth'] = auth
c['www']['authz'] = authz

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
