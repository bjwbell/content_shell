# -*- python -*-
# ex: set syntax=python:
import datetime

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['workers'] = [worker.Worker("slave0", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://github.com/bjwbell/ironframe',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'LayoutTests' build

c['schedulers'] = []
c['schedulers'].append(
    schedulers.Nightly(name='nightly',
                       branch='master',
                       builderNames=['LayoutTests', 'Diff', 'Build'],
                       hour=3,
                       minute=0))
# c['schedulers'].append(schedulers.SingleBranchScheduler(
#                             name="all",
#                             change_filter=util.ChangeFilter(branch='master'),
#                             treeStableTimer=None,
#                             builderNames=["LayoutTests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=['LayoutTests', 'Diff', 'Build']))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

factory = util.BuildFactory()
# check out the source
# factory.addStep(steps.Git(repourl='ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/chrome', mode='incremental'))
factory.addStep(steps.ShellCommand(command=["rm", "-rf", ".gclient"]))
factory.addStep(steps.ShellCommand(command=["rm", "-rf", ".gclient_entries"]))
factory.addStep(steps.ShellCommand(command=["rm", "-rf", "src"]))
factory.addStep(steps.ShellCommand(command=["rm", "-rf", "_bad_scm"]))
factory.addStep(steps.ShellCommand(command=["fetch", "--nohooks", "chromium"], timeout=3600))
factory.addStep(steps.ShellCommand(command=["git", "remote", "add", "codecommit", "ssh://APKAJHXR727PTXMIECSQ@git-codecommit.us-east-1.amazonaws.com/v1/repos/chrome"], workdir="build/src"))
factory.addStep(steps.ShellCommand(command=["git", "fetch", "codecommit", "ironframe"], workdir="build/src", timeout=3600))
factory.addStep(steps.ShellCommand(command=["git", "checkout", "ironframe"], workdir="build/src"))
factory.addStep(steps.ShellCommand(command=["gclient", "runhooks"], workdir="build/src", timeout=3600))
factory.addStep(steps.ShellCommand(command=["gclient", "sync"], workdir="build/src", timeout=3600))
factory.addStep(steps.ShellCommand(command=["gn", "gen", "out/Default"], workdir="build/src"))
factory.addStep(steps.ShellCommand(command=["ninja", "-C", "out/Default", "blink_tests"], workdir="build/src", timeout=3600))
factory.addStep(steps.ShellCommand(command=["python","testing/xvfb.py", "out/Default/", "python", "third_party/WebKit/Tools/Scripts/run-webkit-tests", "-t", "Default", "http/tests/ironframe"], workdir="build/src"))

difffactory = util.BuildFactory()
# check out the source
# factory.addStep(steps.Git(repourl='ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/chrome', mode='incremental'))
#difffactory.addStep(steps.ShellCommand(command=["rm", "-rf", "chrome"]))
#difffactory.addStep(steps.ShellCommand(command=["git", "clone", "--depth=1", "--no-single-branch", "ssh://APKAJHXR727PTXMIECSQ@git-codecommit.us-east-1.amazonaws.com/v1/repos/chrome"], timeout=3600))
#difffactory.addStep(steps.ShellCommand(command=["git", "checkout", "ironframe"], workdir="build/chrome"))
difffactory.addStep(steps.ShellCommand(command=["rm", "-rf", "ironframe"]))
difffactory.addStep(steps.ShellCommand(command=["git", "clone", "git@github.com:bjwbell/ironframe.git"]))
filename = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S") + ".diff"
pathname = "/home/bjwbell/buildbot/bb-worker/worker/Diff/build/ironframe/diffs/" + filename
difffactory.addStep(steps.ShellCommand(command="git diff origin/master...origin/ironframe >" + pathname, workdir="build/chrome"))
difffactory.addStep(steps.ShellCommand(command=["git diff origin/master...origin/ironframe > " + filename], workdir="build/chrome"))
difffactory.addStep(steps.ShellCommand(command=["git", "add", "diffs/" + filename], workdir="build/ironframe"))
difffactory.addStep(steps.ShellCommand(command=["git commit -m \"Add " + filename + "\""], workdir="build/ironframe"))
difffactory.addStep(steps.ShellCommand(command=["git", "push", "origin", "master"], workdir="build/ironframe"))



buildfactory = util.BuildFactory()
# check out the source
# buildfactory.addStep(steps.Git(repourl='ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/chrome', mode='incremental'))
buildfactory.addStep(steps.ShellCommand(command=["rm", "-rf", ".gclient"]))
buildfactory.addStep(steps.ShellCommand(command=["rm", "-rf", ".gclient_entries"]))
buildfactory.addStep(steps.ShellCommand(command=["rm", "-rf", "src"]))
buildfactory.addStep(steps.ShellCommand(command=["rm", "-rf", "_bad_scm"]))
buildfactory.addStep(steps.ShellCommand(command=["fetch", "--nohooks", "chromium"], timeout=3600))
buildfactory.addStep(steps.ShellCommand(command=["git", "remote", "add", "codecommit", "ssh://APKAJHXR727PTXMIECSQ@git-codecommit.us-east-1.amazonaws.com/v1/repos/chrome"], workdir="build/src"))
buildfactory.addStep(steps.ShellCommand(command=["git", "fetch", "codecommit", "ironframe"], workdir="build/src", timeout=3600))
buildfactory.addStep(steps.ShellCommand(command=["git", "checkout", "ironframe"], workdir="build/src"))
buildfactory.addStep(steps.ShellCommand(command=["gclient", "runhooks"], workdir="build/src", timeout=3600))
buildfactory.addStep(steps.ShellCommand(command=["gclient", "sync"], workdir="build/src", timeout=3600))
buildfactory.addStep(steps.ShellCommand(command=["gn", "gen", "out/Default"], workdir="build/src"))
buildfactory.addStep(steps.ShellCommand(command=["ninja", "-C", "out/Default", "chrome"], workdir="build/src", timeout=3600))
buildfactory.addStep(steps.ShellCommand(command=["python","testing/xvfb.py", "out/Default/", "python", "third_party/WebKit/Tools/Scripts/run-webkit-tests", "-t", "Default", "http/tests/ironframe"], workdir="build/src"))


c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="LayoutTests",
      workernames=["slave0"],
      factory=factory))

c['builders'].append(
    util.BuilderConfig(name="Diff",
      workernames=["slave0"],
      factory=difffactory))


c['builders'].append(
    util.BuilderConfig(name="Build",
      workernames=["slave0"],
      factory=buildfactory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "IronFrame"
c['titleURL'] = "http://ironframe.whiteops.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://159.203.194.90:8010/"

authz = util.Authz(
  allowRules=[
    util.StopBuildEndpointMatcher(role="admins"),
    util.ForceBuildEndpointMatcher(role="admins"),
    util.RebuildBuildEndpointMatcher(role="admins")
  ],
  roleMatchers=[
    util.RolesFromEmails(admins=["bjwbell@gmail.com"])
  ]
)
auth=util.UserPasswordAuth({'bjwbell@gmail.com': 'ironframe'})
# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))
c['www']['auth'] = auth
c['www']['authz'] = authz

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
